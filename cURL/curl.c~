#include <stdio.h>
#include <curl/curl.h>
#include <string.h> 
#include <sys/types.h>
#include <sys/stat.h>

#define MAX 30000

int main(void)
{
	CURL *curl;
	CURLcode res;

	FILE *fp = fopen("test.json", "rb");
	int i=0;
	char url[] = "http://192.168.0.20:8080/tutorial/ingredient/curl/";
	char code[MAX];
//	struct stat file_info;
//	curl_off_t fsize;

	while((code[i] = fgetc(fp)) != EOF){
		i++;
	}
	
	strcat(url, code);
//	printf("%s", url);

//	if(stat("test.json", &file_info)){
//		return 1;
//	}
//	curl_global_init(CURL_GLOBAL_ALL);
//	fsize = (curl_off_t)file_info.st_size;
	curl = curl_easy_init();
	if(curl) {
//		curl_easy_setopt(curl, CURLOPT_URL, "http://192.168.0.20:8080/tutorial/ingredient/curl/upload/");
		curl_easy_setopt(curl, CURLOPT_URL, "http://192.168.0.20:8080/tutorial/ingredient/curl");
		/* example.com is redirected, so we tell libcurl to
		 * follow redirection */ 

		curl_easy_setopt(curl, CURLOPT_POSTFIELDS, "aaa");
		curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(code));
//		curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
//		curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
//		curl_easy_setopt(curl, CURLOPT_READDATA, fp);
	
//		curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, (curl_off_t)fsize);

		/* Perform the request, res will get the return
		 * code */ 
		res = curl_easy_perform(curl);
		/* Check for errors */ 
		if(res != CURLE_OK)
			fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
		/* always cleanup */ 
		curl_easy_cleanup(curl);
	}
	fclose(fp);
	return 0;
}
