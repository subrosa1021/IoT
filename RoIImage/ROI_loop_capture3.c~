#define _CRT_SECURE_NO_WARNINGS

#include "opencv2/opencv.hpp"
#include "opencv/cxcore.h"
#include "opencv/highgui.h"
#include <stdio.h>
#include <string>
#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <stdbool.h>

#define NUM 2
#define IMAGE_CNT 2
#define MAXLEVEL 256

#define DB_HOST ""
#define DB_USER "returnzero"
#define DB_PASS "rzero"
#define DB_NAME "smartkichen"
#define TOKEN_COUNT 20

typedef enum _TOKEN_TYPE{
	TOKEN_STRING,
	TOKEN_NUMBER,
} TOKEN_TYPE;

typedef struct _TOKEN{
	TOKEN_TYPE type;
	union{
		char *string;
		double number;
	};
	bool isArray;
} TOKEN;

typedef struct _JSON{
	TOKEN tokens[TOKEN_COUNT];
} JSON;

using namespace std;
using namespace cv;
IplImage *img[NUM];
/////////////////////////////////base64////////////////////////////////////////////////
static const std::string base64_chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "0123456789+/";


static inline bool is_base64(unsigned char c) {
	return (isalnum(c) || (c == '+') || (c == '/'));
}


std::string base64_encode(uchar const* bytes_to_encode, unsigned int in_len) {
	std::string ret;
	int i = 0;
	int j = 0;
	unsigned char char_array_3[3];
	unsigned char char_array_4[4];

	while (in_len--) {
		char_array_3[i++] = *(bytes_to_encode++);
		if (i == 3) {
			char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
			char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
			char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
			char_array_4[3] = char_array_3[2] & 0x3f;

            for (i = 0; (i <4); i++)
                ret += base64_chars[char_array_4[i]];
            i = 0;
        }
    }

    if (i)
    {
        for (j = i; j < 3; j++)
            char_array_3[j] = '\0';

        char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
        char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
        char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
        char_array_4[3] = char_array_3[2] & 0x3f;

        for (j = 0; (j < i + 1); j++)
            ret += base64_chars[char_array_4[j]];

        while ((i++ < 3))
            ret += '=';

    }

    return ret;

}
string mat2str(const Mat& m)
{
    Mat src;
    if (!m.isContinuous()) {
        src = m.clone();
    }
    else {
        src = m;
    }

    // Create header
    int type = m.type();
    int channels = m.channels();
    vector<uchar> data(4*sizeof(int));
    memcpy(&data[0 * sizeof(int)], (uchar*)&m.rows, sizeof(int));
    memcpy(&data[1 * sizeof(int)], (uchar*)&m.cols, sizeof(int));
    memcpy(&data[2 * sizeof(int)], (uchar*)&type, sizeof(int));
    memcpy(&data[3 * sizeof(int)], (uchar*)&channels, sizeof(int));

    // Add image data
    data.insert(data.end(), m.datastart, m.dataend);

    // Encode
    return base64_encode(data.data(), data.size());
}
std::string base64_decode(std::string const& encoded_string) {
    int in_len = encoded_string.size();
    int i = 0;
    int j = 0;
    int in_ = 0;
    unsigned char char_array_4[4], char_array_3[3];
    std::string ret;

    while (in_len-- && (encoded_string[in_] != '=') && is_base64(encoded_string[in_])) {
        char_array_4[i++] = encoded_string[in_]; in_++;
        if (i == 4) {
            for (i = 0; i <4; i++)
                char_array_4[i] = base64_chars.find(char_array_4[i]);

            char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
            char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
            char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

            for (i = 0; (i < 3); i++)
                ret += char_array_3[i];
            i = 0;
        }
    }

    if (i) {
        for (j = i; j <4; j++)
            char_array_4[j] = 0;

        for (j = 0; j <4; j++)
            char_array_4[j] = base64_chars.find(char_array_4[j]);

        char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
        char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
        char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

        for (j = 0; (j < i - 1); j++) ret += char_array_3[j];
    }

    return ret;
}

Mat str2mat(const string& s)
{
    // Decode data
    string data = base64_decode(s);

    // Decode Header
    int rows;
    int cols;
    int type;
    int channels;
    memcpy((char*)&rows, &data[0 * sizeof(int)], sizeof(int));
    memcpy((char*)&cols, &data[1 * sizeof(int)], sizeof(int));
    memcpy((char*)&type, &data[2 * sizeof(int)], sizeof(int));
    memcpy((char*)&channels, &data[3 * sizeof(int)], sizeof(int));

    // Make the mat
    return Mat(rows, cols, type, (uchar*)&data[4*sizeof(int)]).clone();
}


/////////////////////////////////////base64 end////////////////////////////////////////

int calcHistogram(){
	IplImage *srcImage[IMAGE_CNT];
	IplImage *edgeImage[IMAGE_CNT];
	CvHistogram *pHist[IMAGE_CNT];
	int sizes[] = {MAXLEVEL};
	float range[] = {0,MAXLEVEL};
	float* ranges[] = {range};

	// make Image
	if((srcImage[0] = cvLoadImage("emptyImg.jpg", CV_LOAD_IMAGE_GRAYSCALE)) == NULL)
		return -1;

	if((srcImage[1] = cvLoadImage("ROIImage.jpg", CV_LOAD_IMAGE_GRAYSCALE)) == NULL)
		return -1;

	for(int i=0 ; i<IMAGE_CNT ; i++){
		edgeImage[i] = cvCreateImage(cvGetSize(srcImage[i]), IPL_DEPTH_8U, 1);
		cvCanny(srcImage[i], edgeImage[i], 5, 10, 3);
		pHist[i] = cvCreateHist(1, sizes, CV_HIST_ARRAY, ranges, 1);
		cvCalcHist(&edgeImage[i], pHist[i], 0, NULL);
	}

	double dChisqr = cvCompareHist(pHist[0], pHist[1], CV_COMP_CHISQR);
	double dCorrel = cvCompareHist(pHist[0], pHist[1], CV_COMP_CORREL);
	double dIntersect = cvCompareHist(pHist[0], pHist[1], CV_COMP_INTERSECT);
	double dBhattacharyya = cvCompareHist(pHist[0], pHist[1], CV_COMP_BHATTACHARYYA);
	
	printf("Chisqr = %f\n Correl = %f\n Intersect = %f\n Bhaattacharyya = %f\n", dChisqr, dCorrel, dIntersect, dBhattacharyya);

	for(int i=0 ; i<IMAGE_CNT ; i++){
		cvReleaseHist(&pHist[i]);
		cvReleaseImage(&srcImage[i]);
		cvReleaseImage(&edgeImage[i]);
	}
	if(dBhattacharyya > 0.05){
		return 1;
	}else{
		return 0;
	}
}

void imageRoi(IplImage *src){
	IplImage *image = cvCreateImage(cvGetSize(src), IPL_DEPTH_8U, 3);

	img[0] = cvCreateImage(cvGetSize(image), IPL_DEPTH_8U, 1);
	cvCvtColor(src, img[0], CV_BGR2GRAY);
	img[1] = (IplImage*)cvClone(img[0]);
	//cvRect(x Position, y Position, x좌표로 부터의 넓이,
	//y좌표로 부터의 높이
	cvSetImageROI(img[1], cvRect(200, 60, 160, 180));

	cvSaveImage("ROIImage.jpg", img[1]);

	cvReleaseImage(&image);
	cvReleaseImage(&img[0]);
	cvReleaseImage(&img[1]);
}

IplImage *MakeRoiimg(IplImage *src){
	IplImage *image;
	if((image = cvLoadImage("OriginImg.jpg")) == NULL){
		return 0;
	}

	cvSetImageROI(image, cvRect(200, 60, 160, 180));
	cvSaveImage("colorRoi.jpg", image);

	cvReleaseImage(&image);

}
////////////////////////////////// Compare to Image end//////////////////////////////////

char *readFile(char *filename, int *readSize){

	FILE *fp = fopen(filename, "rb");
	if(fp == NULL)
		return NULL;

	int size;
	char *buffer;

	fseek(fp, 0, SEEK_END);
	size = ftell(fp);
	fseek(fp, 0, SEEK_SET);

	buffer = malloc(size+1);
	memset(buffer, 0, size);

	if(fread(buffer, size, 1, fp) < 1){
		*readSize = 0;
		free(buffer);
		fclose(fp);
		return NULL;
	}
	*readSize = size;
	fclose(fp);
	return buffer;
}
void parseJSON(char *doc, int size, JSON *json){
	int tokenIndex = 0;
	int pos = 0;

	if(doc[pos] != '{')
		return;

	pos++;

	while(pos < size){
		switch(doc[pos]){
			case '"':
			{
				char *begin = doc + pos + 1;

				char *end = strchr(begin, '"');
				if(end == NULL)
					break;

				int stringLength = end - begin;

				json->tokens[tokenIndex].type = TOKEN_STRING;
				json->tokens[tokenIndex].string = malloc(stringLength + 1);
				memset(json->tokens[tokenIndex].string, 0, stringLength + 1);

				memcpy(json->tokens[tokenIndex].string, begin, stringLength);

				tokenIndex++;

				pos = pos + stringLength + 1;
			}
			break;
		}
		pos++;
	}
}

void freeJSON(JSON *json){
	for(int i=0 ; i<TOKEN_COUNT ; i++){
		if(json->tokens[i].type == TOKEN_STRING)
			free(json->tokens[i].string);
	}
}


void makeJson(const char *encoded){
	FILE *fp = fopen("example.json", "w");

	fprintf(fp, "{");
	fprintf(fp, "\"requests\": [{");
	fprintf(fp, "\"image\": {");
	fprintf(fp, "\"content\": \"%s\" },", encoded);
	fprintf(fp, "\"features\": [{");
	fprintf(fp, "\"tpye\": \"LABEL_DETECTION\", \"maxResults\": 1");
	fprintf(fp, "}]");
	fprintf(fp, "}]");
	fprintf(fp, "}");

	fclose(fp);
}

/////////////////////////////////// JSON parse end //////////////////////////////////////////

int main(){

	IplImage *image = NULL;
	int value, count=0;
	string encoded;
	int size;

	char *doc = readFile("example.json", &size);
	if( doc == NULL)
		return -1;
	JSON json={ 0, };
	parseJSON(doc, size, &json);

	CvCapture *capture = cvCaptureFromCAM(0);
	cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_WIDTH, 640);
	cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_HEIGHT, 480);

	cvGrabFrame(capture);
	image = cvRetrieveFrame(capture);

	cvSaveImage("OriginImg.jpg", image);
	while(1){
		cvGrabFrame(capture);
		image = cvRetrieveFrame(capture);

		imageRoi(image);

		if((value=calcHistogram()) == 0){
			printf("same Image\n");
			count=0;
		}
		else{
			printf("diffrent Image\n");
			count++;
		}
		sleep(1);
		if(count == 5){
			MakeRoiimg(image);

			Mat img_color = imread("colorRoi.jpg");
			encoded = mat2str(img_color);
			const char *_encoded = encoded.c_str();
			makeJson(_encoded);
			count=0;
		
		}

	}	
	cvReleaseImage(&image);
	freeJSON(&json);
	free(doc);

	return 0;

}
