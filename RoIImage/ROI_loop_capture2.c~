#include "opencv2/opencv.hpp"
#include "opencv/cxcore.h"
#include "opencv/highgui.h"
#include <stdio.h>
#include <iostream>
#include <unistd.h>
#include <mysql/mysql.h>

#define NUM 2
#define IMAGE_CNT 2
#define MAXLEVEL 256

#define DB_HOST ""
#define DB_USER "returnzero"
#define DB_PASS "rzero"
#define DB_NAME "smartkichen"

using namespace cv;
IplImage *img[NUM];
/////////////////////////////////base64////////////////////////////////////////////////
static const std::string base64_chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz"
    "0123456789+/";


static inline bool is_base64(unsigned char c) {
	return (isalnum(c) || (c == '+') || (c == '/'));
}


std::string base64_encode(uchar const* bytes_to_encode, unsigned int in_len) {
	std::string ret;
	int i = 0;
	int j = 0;
	unsigned char char_array_3[3];
	unsigned char char_array_4[4];

	while (in_len--) {
		char_array_3[i++] = *(bytes_to_encode++);
		if (i == 3) {
			char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
			char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
			char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
			char_array_4[3] = char_array_3[2] & 0x3f;

            for (i = 0; (i <4); i++)
                ret += base64_chars[char_array_4[i]];
            i = 0;
        }
    }

    if (i)
    {
        for (j = i; j < 3; j++)
            char_array_3[j] = '\0';

        char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
        char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
        char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
        char_array_4[3] = char_array_3[2] & 0x3f;

        for (j = 0; (j < i + 1); j++)
            ret += base64_chars[char_array_4[j]];

        while ((i++ < 3))
            ret += '=';

    }

    return ret;

}
string mat2str(const Mat& m)
{
    Mat src;
    if (!m.isContinuous()) {
        src = m.clone();
    }
    else {
        src = m;
    }

    // Create header
    int type = m.type();
    int channels = m.channels();
    vector<uchar> data(4*sizeof(int));
    memcpy(&data[0 * sizeof(int)], (uchar*)&m.rows, sizeof(int));
    memcpy(&data[1 * sizeof(int)], (uchar*)&m.cols, sizeof(int));
    memcpy(&data[2 * sizeof(int)], (uchar*)&type, sizeof(int));
    memcpy(&data[3 * sizeof(int)], (uchar*)&channels, sizeof(int));

    // Add image data
    data.insert(data.end(), m.datastart, m.dataend);

    // Encode
    return base64_encode(data.data(), data.size());
}


/////////////////////////////////////base64 end////////////////////////////////////////

int calcHistogram(){
	IplImage *srcImage[IMAGE_CNT];
	IplImage *edgeImage[IMAGE_CNT];
	CvHistogram *pHist[IMAGE_CNT];
	int sizes[] = {MAXLEVEL};
	float range[] = {0,MAXLEVEL};
	float* ranges[] = {range};

	// make Image
	if((srcImage[0] = cvLoadImage("emptyImg.jpg", CV_LOAD_IMAGE_GRAYSCALE)) == NULL)
		return -1;

	if((srcImage[1] = cvLoadImage("ROIImage.jpg", CV_LOAD_IMAGE_GRAYSCALE)) == NULL)
		return -1;

	for(int i=0 ; i<IMAGE_CNT ; i++){
		edgeImage[i] = cvCreateImage(cvGetSize(srcImage[i]), IPL_DEPTH_8U, 1);
		cvCanny(srcImage[i], edgeImage[i], 5, 10, 3);
		pHist[i] = cvCreateHist(1, sizes, CV_HIST_ARRAY, ranges, 1);
		cvCalcHist(&edgeImage[i], pHist[i], 0, NULL);
	}

	double dChisqr = cvCompareHist(pHist[0], pHist[1], CV_COMP_CHISQR);
	double dCorrel = cvCompareHist(pHist[0], pHist[1], CV_COMP_CORREL);
	double dIntersect = cvCompareHist(pHist[0], pHist[1], CV_COMP_INTERSECT);
	double dBhattacharyya = cvCompareHist(pHist[0], pHist[1], CV_COMP_BHATTACHARYYA);
	
	printf("Chisqr = %f\n Correl = %f\n Intersect = %f\n Bhaattacharyya = %f\n", dChisqr, dCorrel, dIntersect, dBhattacharyya);

	for(int i=0 ; i<IMAGE_CNT ; i++){
		cvReleaseHist(&pHist[i]);
		cvReleaseImage(&srcImage[i]);
		cvReleaseImage(&edgeImage[i]);
	}
	if(dBhattacharyya > 0.05){
		return 1;
	}else{
		return 0;
	}
}

void imageRoi(IplImage *src){
	IplImage *image = cvCreateImage(cvGetSize(src), IPL_DEPTH_8U, 3);

	img[0] = cvCreateImage(cvGetSize(image), IPL_DEPTH_8U, 3);
	cvCvtColor(src, img[0], CV_BGR2GRAY);
	img[1] = (IplImage*)cvClone(img[0]);
	//cvRect(x Position, y Position, x좌표로 부터의 넓이,
	//y좌표로 부터의 높이
	cvSetImageROI(img[1], cvRect(200, 60, 160, 180));

	cvSaveImage("ROIImage.jpg", img[1]);

	cvReleaseImage(&image);
	cvReleaseImage(&img[0]);
	cvReleaseImage(&img[1]);
}

IplImage *MakeRoiimg(IplImage *src){
	IplImage *image;
//	if((image = cvLoadImage("OriginImg.jpg")) == NULL){
//		return 0;
//	}

	cvSetImageROI(image, cvRect(200, 60, 160, 180));
	cvSaveImage("colorRoi.jpg", image);

	cvReleaseImage(&image);

}

void DB_Connection(char value){
	MYSQL *connection = NULL, conn;
	MYSQL_RES *sql_result;

	int query_stat;
	char num[12];
	char query[255];

	mysql_init(&conn);
	connection = mysql_real_connect(&conn, DB_HOST, DB_USER, DB_PASS, DB_NAME, 3306, (char *)NULL, 0);
	if(connection == NULL){
		fprintf(stderr, "Mysql connection error : %s\n", mysql_error(&conn));
	}

	sprintf(query, "update object set num = '%d'\n", value);

	query_stat = mysql_query(connection, query);
	if(query_stat != 0){
		fprintf(stderr, "Mysql query error : %s\n", mysql_error(&conn));
	}

	mysql_close(connection);
}

int main(){

	IplImage *image = NULL;
	int value, count=0;
	string encoded;

	CvCapture *capture = cvCaptureFromCAM(0);
	cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_WIDTH, 640);
	cvSetCaptureProperty(capture, CV_CAP_PROP_FRAME_HEIGHT, 480);

	cvGrabFrame(capture);
	image = cvRetrieveFrame(capture);

	cvSaveImage("OriginImg.jpg", image);
	while(1){
		cvGrabFrame(capture);
		image = cvRetrieveFrame(capture);

		imageRoi(image);

		if((value=calcHistogram()) == 0){
			printf("same Image\n");
			count=0;
		}
		else{
			printf("diffrent Image\n");
			count++;
		}
		sleep(1);
		if(count == 5){
			MakeRoiimg(image);
			count=0;
		}

	}	
	cvReleaseImage(&image);

	return 0;

}
